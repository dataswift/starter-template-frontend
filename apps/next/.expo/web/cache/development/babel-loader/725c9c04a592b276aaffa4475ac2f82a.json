{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nexports.__esModule = true;\nexports.ResponderTouchHistoryStore = void 0;\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\n\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch, touchHistory) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchHistory.touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction recordTouchEnd(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(touchHistory) {\n  var touchBank = touchHistory.touchBank;\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nvar ResponderTouchHistoryStore = function () {\n  function ResponderTouchHistoryStore() {\n    _classCallCheck(this, ResponderTouchHistoryStore);\n\n    this._touchHistory = {\n      touchBank: [],\n      numberActiveTouches: 0,\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n  }\n\n  _createClass(ResponderTouchHistoryStore, [{\n    key: \"recordTouchTrack\",\n    value: function recordTouchTrack(topLevelType, nativeEvent) {\n      var touchHistory = this._touchHistory;\n\n      if ((0, _ResponderEventTypes.isMoveish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchMove(touch, touchHistory);\n        });\n      } else if ((0, _ResponderEventTypes.isStartish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchStart(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n        if (touchHistory.numberActiveTouches === 1) {\n          touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n        }\n      } else if ((0, _ResponderEventTypes.isEndish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchEnd(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n        if (touchHistory.numberActiveTouches === 1) {\n          var touchBank = touchHistory.touchBank;\n\n          for (var i = 0; i < touchBank.length; i++) {\n            var touchTrackToCheck = touchBank[i];\n\n            if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n              touchHistory.indexOfSingleActiveTouch = i;\n              break;\n            }\n          }\n\n          if (__DEV__) {\n            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n            if (!(activeRecord != null && activeRecord.touchActive)) {\n              console.error('Cannot find single active touch.');\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"touchHistory\",\n    get: function get() {\n      return this._touchHistory;\n    }\n  }]);\n\n  return ResponderTouchHistoryStore;\n}();\n\nexports.ResponderTouchHistoryStore = ResponderTouchHistoryStore;","map":{"version":3,"names":["exports","__esModule","ResponderTouchHistoryStore","_ResponderEventTypes","require","__DEV__","process","env","NODE_ENV","MAX_TOUCH_BANK","timestampForTouch","touch","timeStamp","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","_ref","identifier","console","error","recordTouchStart","touchHistory","touchBank","mostRecentTimeStamp","recordTouchMove","warn","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","length","_touchHistory","numberActiveTouches","indexOfSingleActiveTouch","topLevelType","nativeEvent","isMoveish","changedTouches","forEach","isStartish","touches","isEndish","i","touchTrackToCheck","activeRecord"],"sources":["/home/jasoncruz98/Projects/react-native/starter-template-frontend/node_modules/react-native-web/dist/cjs/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.ResponderTouchHistoryStore = void 0;\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\n\nfunction timestampForTouch(touch) {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return touch.timeStamp || touch.timestamp;\n}\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\n\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch, touchHistory) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchHistory.touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction recordTouchEnd(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(touchHistory) {\n  var touchBank = touchHistory.touchBank;\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nclass ResponderTouchHistoryStore {\n  constructor() {\n    this._touchHistory = {\n      touchBank: [],\n      //Array<TouchRecord>\n      numberActiveTouches: 0,\n      // If there is only one active touch, we remember its location. This prevents\n      // us having to loop through all of the touches all the time in the most\n      // common case.\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n  }\n\n  recordTouchTrack(topLevelType, nativeEvent) {\n    var touchHistory = this._touchHistory;\n\n    if ((0, _ResponderEventTypes.isMoveish)(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchMove(touch, touchHistory));\n    } else if ((0, _ResponderEventTypes.isStartish)(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchStart(touch, touchHistory));\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if ((0, _ResponderEventTypes.isEndish)(topLevelType)) {\n      nativeEvent.changedTouches.forEach(touch => recordTouchEnd(touch, touchHistory));\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        var touchBank = touchHistory.touchBank;\n\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  }\n\n  get touchHistory() {\n    return this._touchHistory;\n  }\n\n}\n\nexports.ResponderTouchHistoryStore = ResponderTouchHistoryStore;"],"mappings":"AAAA;;;;;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,0BAAR,GAAqC,KAAK,CAA1C;;AAEA,IAAIC,oBAAoB,GAAGC,OAAO,yBAAlC;;AAgBA,IAAIC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC;;AAEA,IAAIC,cAAc,GAAG,EAArB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;EAGhC,OAAOA,KAAK,CAACC,SAAN,IAAmBD,KAAK,CAACE,SAAhC;AACD;;AAOD,SAASC,iBAAT,CAA2BH,KAA3B,EAAkC;EAChC,OAAO;IACLI,WAAW,EAAE,IADR;IAELC,UAAU,EAAEL,KAAK,CAACM,KAFb;IAGLC,UAAU,EAAEP,KAAK,CAACQ,KAHb;IAILC,cAAc,EAAEV,iBAAiB,CAACC,KAAD,CAJ5B;IAKLU,YAAY,EAAEV,KAAK,CAACM,KALf;IAMLK,YAAY,EAAEX,KAAK,CAACQ,KANf;IAOLI,gBAAgB,EAAEb,iBAAiB,CAACC,KAAD,CAP9B;IAQLa,aAAa,EAAEb,KAAK,CAACM,KARhB;IASLQ,aAAa,EAAEd,KAAK,CAACQ,KAThB;IAULO,iBAAiB,EAAEhB,iBAAiB,CAACC,KAAD;EAV/B,CAAP;AAYD;;AAED,SAASgB,gBAAT,CAA0BC,WAA1B,EAAuCjB,KAAvC,EAA8C;EAC5CiB,WAAW,CAACb,WAAZ,GAA0B,IAA1B;EACAa,WAAW,CAACZ,UAAZ,GAAyBL,KAAK,CAACM,KAA/B;EACAW,WAAW,CAACV,UAAZ,GAAyBP,KAAK,CAACQ,KAA/B;EACAS,WAAW,CAACR,cAAZ,GAA6BV,iBAAiB,CAACC,KAAD,CAA9C;EACAiB,WAAW,CAACP,YAAZ,GAA2BV,KAAK,CAACM,KAAjC;EACAW,WAAW,CAACN,YAAZ,GAA2BX,KAAK,CAACQ,KAAjC;EACAS,WAAW,CAACL,gBAAZ,GAA+Bb,iBAAiB,CAACC,KAAD,CAAhD;EACAiB,WAAW,CAACJ,aAAZ,GAA4Bb,KAAK,CAACM,KAAlC;EACAW,WAAW,CAACH,aAAZ,GAA4Bd,KAAK,CAACQ,KAAlC;EACAS,WAAW,CAACF,iBAAZ,GAAgChB,iBAAiB,CAACC,KAAD,CAAjD;AACD;;AAED,SAASkB,kBAAT,CAA4BC,IAA5B,EAAkC;EAChC,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;;EAEA,IAAIA,UAAU,IAAI,IAAlB,EAAwB;IACtBC,OAAO,CAACC,KAAR,CAAc,qCAAd;EACD;;EAED,IAAI5B,OAAJ,EAAa;IACX,IAAI0B,UAAU,GAAGtB,cAAjB,EAAiC;MAC/BuB,OAAO,CAACC,KAAR,CAAc,2EAA2E,wEAAzF,EAAmKF,UAAnK,EAA+KtB,cAA/K;IACD;EACF;;EAED,OAAOsB,UAAP;AACD;;AAED,SAASG,gBAAT,CAA0BvB,KAA1B,EAAiCwB,YAAjC,EAA+C;EAC7C,IAAIJ,UAAU,GAAGF,kBAAkB,CAAClB,KAAD,CAAnC;EACA,IAAIiB,WAAW,GAAGO,YAAY,CAACC,SAAb,CAAuBL,UAAvB,CAAlB;;EAEA,IAAIH,WAAJ,EAAiB;IACfD,gBAAgB,CAACC,WAAD,EAAcjB,KAAd,CAAhB;EACD,CAFD,MAEO;IACLwB,YAAY,CAACC,SAAb,CAAuBL,UAAvB,IAAqCjB,iBAAiB,CAACH,KAAD,CAAtD;EACD;;EAEDwB,YAAY,CAACE,mBAAb,GAAmC3B,iBAAiB,CAACC,KAAD,CAApD;AACD;;AAED,SAAS2B,eAAT,CAAyB3B,KAAzB,EAAgCwB,YAAhC,EAA8C;EAC5C,IAAIP,WAAW,GAAGO,YAAY,CAACC,SAAb,CAAuBP,kBAAkB,CAAClB,KAAD,CAAzC,CAAlB;;EAEA,IAAIiB,WAAJ,EAAiB;IACfA,WAAW,CAACb,WAAZ,GAA0B,IAA1B;IACAa,WAAW,CAACJ,aAAZ,GAA4BI,WAAW,CAACP,YAAxC;IACAO,WAAW,CAACH,aAAZ,GAA4BG,WAAW,CAACN,YAAxC;IACAM,WAAW,CAACF,iBAAZ,GAAgCE,WAAW,CAACL,gBAA5C;IACAK,WAAW,CAACP,YAAZ,GAA2BV,KAAK,CAACM,KAAjC;IACAW,WAAW,CAACN,YAAZ,GAA2BX,KAAK,CAACQ,KAAjC;IACAS,WAAW,CAACL,gBAAZ,GAA+Bb,iBAAiB,CAACC,KAAD,CAAhD;IACAwB,YAAY,CAACE,mBAAb,GAAmC3B,iBAAiB,CAACC,KAAD,CAApD;EACD,CATD,MASO;IACLqB,OAAO,CAACO,IAAR,CAAa,mDAAb,EAAkE,iBAAiBC,UAAU,CAAC7B,KAAD,CAA3B,GAAqC,IAAvG,EAA6G,iBAAiB8B,cAAc,CAACN,YAAD,CAA5I;EACD;AACF;;AAED,SAASO,cAAT,CAAwB/B,KAAxB,EAA+BwB,YAA/B,EAA6C;EAC3C,IAAIP,WAAW,GAAGO,YAAY,CAACC,SAAb,CAAuBP,kBAAkB,CAAClB,KAAD,CAAzC,CAAlB;;EAEA,IAAIiB,WAAJ,EAAiB;IACfA,WAAW,CAACb,WAAZ,GAA0B,KAA1B;IACAa,WAAW,CAACJ,aAAZ,GAA4BI,WAAW,CAACP,YAAxC;IACAO,WAAW,CAACH,aAAZ,GAA4BG,WAAW,CAACN,YAAxC;IACAM,WAAW,CAACF,iBAAZ,GAAgCE,WAAW,CAACL,gBAA5C;IACAK,WAAW,CAACP,YAAZ,GAA2BV,KAAK,CAACM,KAAjC;IACAW,WAAW,CAACN,YAAZ,GAA2BX,KAAK,CAACQ,KAAjC;IACAS,WAAW,CAACL,gBAAZ,GAA+Bb,iBAAiB,CAACC,KAAD,CAAhD;IACAwB,YAAY,CAACE,mBAAb,GAAmC3B,iBAAiB,CAACC,KAAD,CAApD;EACD,CATD,MASO;IACLqB,OAAO,CAACO,IAAR,CAAa,kDAAb,EAAiE,gBAAgBC,UAAU,CAAC7B,KAAD,CAA1B,GAAoC,IAArG,EAA2G,iBAAiB8B,cAAc,CAACN,YAAD,CAA1I;EACD;AACF;;AAED,SAASK,UAAT,CAAoB7B,KAApB,EAA2B;EACzB,OAAOgC,IAAI,CAACC,SAAL,CAAe;IACpBb,UAAU,EAAEpB,KAAK,CAACoB,UADE;IAEpBd,KAAK,EAAEN,KAAK,CAACM,KAFO;IAGpBE,KAAK,EAAER,KAAK,CAACQ,KAHO;IAIpBN,SAAS,EAAEH,iBAAiB,CAACC,KAAD;EAJR,CAAf,CAAP;AAMD;;AAED,SAAS8B,cAAT,CAAwBN,YAAxB,EAAsC;EACpC,IAAIC,SAAS,GAAGD,YAAY,CAACC,SAA7B;EACA,IAAIS,OAAO,GAAGF,IAAI,CAACC,SAAL,CAAeR,SAAS,CAACU,KAAV,CAAgB,CAAhB,EAAmBrC,cAAnB,CAAf,CAAd;;EAEA,IAAI2B,SAAS,CAACW,MAAV,GAAmBtC,cAAvB,EAAuC;IACrCoC,OAAO,IAAI,sBAAsBT,SAAS,CAACW,MAAhC,GAAyC,GAApD;EACD;;EAED,OAAOF,OAAP;AACD;;IAEK3C,0B;EACJ,sCAAc;IAAA;;IACZ,KAAK8C,aAAL,GAAqB;MACnBZ,SAAS,EAAE,EADQ;MAGnBa,mBAAmB,EAAE,CAHF;MAOnBC,wBAAwB,EAAE,CAAC,CAPR;MAQnBb,mBAAmB,EAAE;IARF,CAArB;EAUD;;;;WAED,0BAAiBc,YAAjB,EAA+BC,WAA/B,EAA4C;MAC1C,IAAIjB,YAAY,GAAG,KAAKa,aAAxB;;MAEA,IAAI,CAAC,GAAG7C,oBAAoB,CAACkD,SAAzB,EAAoCF,YAApC,CAAJ,EAAuD;QACrDC,WAAW,CAACE,cAAZ,CAA2BC,OAA3B,CAAmC,UAAA5C,KAAK;UAAA,OAAI2B,eAAe,CAAC3B,KAAD,EAAQwB,YAAR,CAAnB;QAAA,CAAxC;MACD,CAFD,MAEO,IAAI,CAAC,GAAGhC,oBAAoB,CAACqD,UAAzB,EAAqCL,YAArC,CAAJ,EAAwD;QAC7DC,WAAW,CAACE,cAAZ,CAA2BC,OAA3B,CAAmC,UAAA5C,KAAK;UAAA,OAAIuB,gBAAgB,CAACvB,KAAD,EAAQwB,YAAR,CAApB;QAAA,CAAxC;QACAA,YAAY,CAACc,mBAAb,GAAmCG,WAAW,CAACK,OAAZ,CAAoBV,MAAvD;;QAEA,IAAIZ,YAAY,CAACc,mBAAb,KAAqC,CAAzC,EAA4C;UAC1Cd,YAAY,CAACe,wBAAb,GAAwCE,WAAW,CAACK,OAAZ,CAAoB,CAApB,EAAuB1B,UAA/D;QACD;MACF,CAPM,MAOA,IAAI,CAAC,GAAG5B,oBAAoB,CAACuD,QAAzB,EAAmCP,YAAnC,CAAJ,EAAsD;QAC3DC,WAAW,CAACE,cAAZ,CAA2BC,OAA3B,CAAmC,UAAA5C,KAAK;UAAA,OAAI+B,cAAc,CAAC/B,KAAD,EAAQwB,YAAR,CAAlB;QAAA,CAAxC;QACAA,YAAY,CAACc,mBAAb,GAAmCG,WAAW,CAACK,OAAZ,CAAoBV,MAAvD;;QAEA,IAAIZ,YAAY,CAACc,mBAAb,KAAqC,CAAzC,EAA4C;UAC1C,IAAIb,SAAS,GAAGD,YAAY,CAACC,SAA7B;;UAEA,KAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,SAAS,CAACW,MAA9B,EAAsCY,CAAC,EAAvC,EAA2C;YACzC,IAAIC,iBAAiB,GAAGxB,SAAS,CAACuB,CAAD,CAAjC;;YAEA,IAAIC,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,CAAC7C,WAAnD,EAAgE;cAC9DoB,YAAY,CAACe,wBAAb,GAAwCS,CAAxC;cACA;YACD;UACF;;UAED,IAAItD,OAAJ,EAAa;YACX,IAAIwD,YAAY,GAAGzB,SAAS,CAACD,YAAY,CAACe,wBAAd,CAA5B;;YAEA,IAAI,EAAEW,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAAC9C,WAAvC,CAAJ,EAAyD;cACvDiB,OAAO,CAACC,KAAR,CAAc,kCAAd;YACD;UACF;QACF;MACF;IACF;;;SAED,eAAmB;MACjB,OAAO,KAAKe,aAAZ;IACD;;;;;;AAIHhD,OAAO,CAACE,0BAAR,GAAqCA,0BAArC"},"metadata":{},"sourceType":"script"}
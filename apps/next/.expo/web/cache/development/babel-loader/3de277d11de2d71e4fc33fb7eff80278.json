{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _unitlessNumbers = _interopRequireDefault(require(\"../unitlessNumbers\"));\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_unitlessNumbers.default.hasOwnProperty(name) && _unitlessNumbers.default[name])) {\n    return value + 'px';\n  }\n\n  return ('' + value).trim();\n}\n\nvar _default = dangerousStyleValue;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_unitlessNumbers","dangerousStyleValue","name","value","isCustomProperty","isEmpty","hasOwnProperty","trim","_default","module"],"sources":["/home/jasoncruz98/Projects/react-native/starter-template-frontend/node_modules/react-native-web/dist/cjs/modules/setValueForStyles/dangerousStyleValue.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _unitlessNumbers = _interopRequireDefault(require(\"../unitlessNumbers\"));\n\n/* eslint-disable */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_unitlessNumbers.default.hasOwnProperty(name) && _unitlessNumbers.default[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nvar _default = dangerousStyleValue;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACD,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIG,gBAAgB,GAAGL,sBAAsB,CAACC,OAAO,sBAAR,CAA7C;;AAuBA,SAASK,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,gBAA1C,EAA4D;EAU1D,IAAIC,OAAO,GAAGF,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,IAA+CA,KAAK,KAAK,EAAvE;;EAEA,IAAIE,OAAJ,EAAa;IACX,OAAO,EAAP;EACD;;EAED,IAAI,CAACD,gBAAD,IAAqB,OAAOD,KAAP,KAAiB,QAAtC,IAAkDA,KAAK,KAAK,CAA5D,IAAiE,EAAEH,gBAAgB,CAACH,OAAjB,CAAyBS,cAAzB,CAAwCJ,IAAxC,KAAiDF,gBAAgB,CAACH,OAAjB,CAAyBK,IAAzB,CAAnD,CAArE,EAAyJ;IACvJ,OAAOC,KAAK,GAAG,IAAf;EACD;;EAED,OAAO,CAAC,KAAKA,KAAN,EAAaI,IAAb,EAAP;AACD;;AAED,IAAIC,QAAQ,GAAGP,mBAAf;AACAH,OAAO,CAACD,OAAR,GAAkBW,QAAlB;AACAC,MAAM,CAACX,OAAP,GAAiBA,OAAO,CAACD,OAAzB"},"metadata":{},"sourceType":"script"}